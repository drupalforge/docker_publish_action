name: Docker build and push workflow
on:
  workflow_call:
    inputs:
      dockerhub_username:
        description: 'Docker Hub username'
        required: true
        type: string
      image_repo:
        description: 'Docker Hub image repository. Defaults to the repository name if not provided.'
        required: false
        type: string
      files_to_hash:
        description: 'List of files to check for changes (space or newline separated). Relative paths are assumed to be in app root. Defaults to composer.lock if not provided.'
        required: false
        type: string
    secrets:
      dockerhub_token:
        description: 'Docker Hub token'
        required: true
      dp_ai_virtual_key:
        description: 'DevPanel AI Virtual Key'
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  retrieve-files-hash:
    runs-on: ubuntu-latest
    steps:
      - name: Restore files hash cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: .files_hash.cache
          key: files-hash:${{ inputs.image_repo || github.repository }}:${{ github.ref_name }}:${{ github.run_id }}:${{ github.run_attempt }}
          restore-keys: |
            files-hash:${{ inputs.image_repo || github.repository }}:${{ github.ref_name }}

      - name: Read cached hash value
        if: github.event_name != 'push' && steps.cache.outputs.cache-matched-key
        id: read_cached_hash
        run: |
          echo "cached_hash=$(cat .files_hash.cache)" >> $GITHUB_OUTPUT
          cat .files_hash.cache
        shell: bash
    outputs:
      cached_hash: ${{ steps.read_cached_hash.outputs.cached_hash || null }}
      matched_key: ${{ steps.cache.outputs.cache-matched-key || null }}

  build-and-push:
    needs: retrieve-files-hash
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: drupaldb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root --password=root"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    strategy:
      matrix:
        arch:
          - linux/amd64
    steps:
      - name: Publish image to Docker Hub
        id: publish
        uses: drupalforge/docker_publish_action@main
        env:
          NETWORK: ${{ job.services.mysql.network }}
        with:
          dockerhub_username: ${{ inputs.dockerhub_username }}
          dockerhub_token: ${{ secrets.dockerhub_token }}
          dp_ai_virtual_key: ${{ secrets.dp_ai_virtual_key || null }}
          image_repo: ${{ inputs.image_repo || github.repository }}
          files_to_hash: ${{ inputs.files_to_hash || null }}
          cached_hash: ${{ needs.retrieve-files-hash.outputs.cached_hash || null }}
          build_platform: ${{ matrix.arch }}

      - name: Save image ID to file
        if: steps.publish.outputs.skip != 'true'
        id: save_image_id
        run: |
          ARCH_SAFE="${{ matrix.arch }}"
          ARCH_SAFE="${ARCH_SAFE//\//_}"
          echo "arch_safe=$ARCH_SAFE" >> $GITHUB_OUTPUT
          echo '{ "${{ matrix.arch }}": "${{ steps.publish.outputs.image }}" }' > "${ARCH_SAFE}-image_id.json"

      - name: Upload artifact with image ID
        if: steps.publish.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.save_image_id.outputs.arch_safe }}-image_id
          path: ${{ steps.save_image_id.outputs.arch_safe }}-image_id.json
    outputs:
      hash: ${{ steps.publish.outputs.hash }}
      skip: ${{ steps.publish.outputs.skip }}

  create-manifest:
    needs: build-and-push
    if: needs.build-and-push.outputs.skip != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download image ID artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '*-image_id'
          path: ./artifacts
          merge-multiple: true

      - name: Merge image ID artifacts to JSON
        id: images
        run: |
          echo "images=$(jq -s 'add' ./artifacts/* | jq -c .)" >> $GITHUB_OUTPUT

      - uses: drupalforge/docker_publish_action/manifest@main
        with:
          dockerhub_username: ${{ inputs.dockerhub_username }}
          dockerhub_token: ${{ secrets.dockerhub_token }}
          image_repo: ${{ inputs.image_repo || github.repository }}
          manifest_images: ${{ steps.images.outputs.images }}

  store-files-hash:
    needs:
      - retrieve-files-hash
      - build-and-push
    if: needs.build-and-push.outputs.skip != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Delete old cached hash
        if: needs.retrieve-files-hash.outputs.matched_key
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh cache delete ${{ needs.retrieve-files-hash.outputs.matched_key }}
        shell: bash

      - name: Save new hash to cache file
        id: save_hash_file
        run: |
          echo "${{ needs.build-and-push.outputs.hash }}" > .files_hash.cache
        shell: bash

      - name: Save hash to cache
        uses: actions/cache/save@v4
        with:
          path: .files_hash.cache
          key: files-hash:${{ inputs.image_repo || github.repository }}:${{ github.ref_name }}:${{ github.run_id }}:${{ github.run_attempt }}
